---
apiVersion: v1
kind: Template
metadata:
  labels:
    app: enmasse
  name: tls-enmasse-infra
objects:
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      app: enmasse
    name: tls-queue-inmemory
  objects:
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        address_config: address-config-${TENANT}-${NAME}
        app: enmasse
        group_id: "${NAME}"
        tenant: "${TENANT}"
      name: "${TENANT}-${NAME}"
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            app: enmasse
            group_id: "${NAME}"
            role: broker
            tenant: "${TENANT}"
        spec:
          containers:
          - env:
            - name: QUEUE_NAME
              value: "${ADDRESS}"
            - name: GROUP_ID
              value: "${NAME}"
            image: "${BROKER_REPO}:latest"
            lifecycle:
              preStop:
                exec:
                  command:
                  - "/opt/artemis-shutdown-hook/bin/artemis-shutdown-hook"
            livenessProbe:
              tcpSocket:
                port: amqp
            name: broker
            ports:
            - containerPort: 5673
              name: amqp
            - containerPort: 61616
              name: core
            volumeMounts:
            - mountPath: "/var/run/artemis"
              name: vol-${TENANT}-${NAME}
          volumes:
          - emptyDir: {}
            name: vol-${TENANT}-${NAME}
          - name: ssl-certs
            secret:
              secretName: qdrouterd-certs
  - apiVersion: v1
    data:
      "${ADDRESS}": '{"store_and_forward": true, "multicast": false}'
    kind: ConfigMap
    metadata:
      labels:
        app: enmasse
        group_id: "${NAME}"
        tenant: "${TENANT}"
        type: address-config
      name: address-config-${TENANT}-${NAME}
  parameters:
  - description: Storage capacity required for volume claims
    name: STORAGE_CAPACITY
    value: 2Gi
  - description: The docker image to use for the message broker
    name: BROKER_REPO
    value: enmasseproject/artemis
  - description: The default image to use as topic forwarder
    name: TOPIC_FORWARDER_REPO
    value: enmasseproject/topic-forwarder
  - description: The image to use for the router
    name: ROUTER_REPO
    value: enmasseproject/qdrouterd
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: A valid tenant name for the instance
    name: TENANT
    required: true
  - description: A valid name for the instance
    name: NAME
    required: true
  - description: The address to use for the queue
    name: ADDRESS
    required: true
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      app: enmasse
    name: tls-queue-persisted
  objects:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: enmasse
        group_id: "${NAME}"
        tenant: "${TENANT}"
      name: pvc-${TENANT}-${NAME}
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: "${STORAGE_CAPACITY}"
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        address_config: address-config-${TENANT}-${NAME}
        app: enmasse
        group_id: "${NAME}"
        tenant: "${TENANT}"
      name: "${TENANT}-${NAME}"
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            app: enmasse
            group_id: "${NAME}"
            role: broker
            tenant: "${TENANT}"
        spec:
          containers:
          - env:
            - name: QUEUE_NAME
              value: "${ADDRESS}"
            - name: GROUP_ID
              value: "${NAME}"
            image: "${BROKER_REPO}:latest"
            lifecycle:
              preStop:
                exec:
                  command:
                  - "/opt/artemis-shutdown-hook/bin/artemis-shutdown-hook"
            livenessProbe:
              tcpSocket:
                port: amqp
            name: broker
            ports:
            - containerPort: 5673
              name: amqp
            - containerPort: 61616
              name: core
            volumeMounts:
            - mountPath: "/var/run/artemis"
              name: vol-${TENANT}-${NAME}
          volumes:
          - name: vol-${TENANT}-${NAME}
            persistentVolumeClaim:
              claimName: pvc-${TENANT}-${NAME}
          - name: ssl-certs
            secret:
              secretName: qdrouterd-certs
  - apiVersion: v1
    data:
      "${ADDRESS}": '{"store_and_forward": true, "multicast": false}'
    kind: ConfigMap
    metadata:
      labels:
        app: enmasse
        group_id: "${NAME}"
        tenant: "${TENANT}"
        type: address-config
      name: address-config-${TENANT}-${NAME}
  parameters:
  - description: Storage capacity required for volume claims
    name: STORAGE_CAPACITY
    value: 2Gi
  - description: The docker image to use for the message broker
    name: BROKER_REPO
    value: enmasseproject/artemis
  - description: The default image to use as topic forwarder
    name: TOPIC_FORWARDER_REPO
    value: enmasseproject/topic-forwarder
  - description: The image to use for the router
    name: ROUTER_REPO
    value: enmasseproject/qdrouterd
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: A valid tenant name for the instance
    name: TENANT
    required: true
  - description: A valid name for the instance
    name: NAME
    required: true
  - description: The address to use for the queue
    name: ADDRESS
    required: true
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      app: enmasse
    name: tls-topic-inmemory
  objects:
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        address_config: address-config-${TENANT}-${NAME}
        app: enmasse
        group_id: "${NAME}"
        tenant: "${TENANT}"
      name: "${TENANT}-${NAME}"
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            app: enmasse
            group_id: "${NAME}"
            role: broker
            tenant: "${TENANT}"
        spec:
          containers:
          - env:
            - name: TOPIC_NAME
              value: "${ADDRESS}"
            - name: GROUP_ID
              value: "${NAME}"
            image: "${BROKER_REPO}:latest"
            lifecycle:
              preStop:
                exec:
                  command:
                  - "/opt/artemis-shutdown-hook/bin/artemis-shutdown-hook"
            livenessProbe:
              tcpSocket:
                port: amqp
            name: broker
            ports:
            - containerPort: 5673
              name: amqp
            - containerPort: 61616
              name: core
            volumeMounts:
            - mountPath: "/var/run/artemis"
              name: vol-${TENANT}-${NAME}
          - env:
            - name: LINK_CAPACITY
              value: "${ROUTER_LINK_CAPACITY}"
            - name: TOPIC_NAME
              value: "${ADDRESS}"
            image: "${ROUTER_REPO}:latest"
            livenessProbe:
              tcpSocket:
                port: amqp
            name: router
            ports:
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 55673
              name: internal
              protocol: TCP
            - containerPort: 5671
              name: amqps
              protocol: TCP
            resources:
              limits:
                memory: 256Mi
              requests:
                memory: 256Mi
            volumeMounts:
            - mountPath: "/etc/qpid-dispatch/ssl"
              name: ssl-certs
              readOnly: true
          - env:
            - name: TOPIC_NAME
              value: "${ADDRESS}"
            image: "${TOPIC_FORWARDER_REPO}:latest"
            livenessProbe:
              httpGet:
                path: "/health"
                port: health
            name: forwarder
            ports:
            - containerPort: 8080
              name: health
            resources:
              limits:
                memory: 128Mi
              requests:
                memory: 128Mi
          volumes:
          - emptyDir: {}
            name: vol-${TENANT}-${NAME}
          - name: ssl-certs
            secret:
              secretName: qdrouterd-certs
  - apiVersion: v1
    data:
      "${ADDRESS}": '{"store_and_forward": true, "multicast": true}'
    kind: ConfigMap
    metadata:
      labels:
        app: enmasse
        group_id: "${NAME}"
        tenant: "${TENANT}"
        type: address-config
      name: address-config-${TENANT}-${NAME}
  parameters:
  - description: Storage capacity required for volume claims
    name: STORAGE_CAPACITY
    value: 2Gi
  - description: The docker image to use for the message broker
    name: BROKER_REPO
    value: enmasseproject/artemis
  - description: The default image to use as topic forwarder
    name: TOPIC_FORWARDER_REPO
    value: enmasseproject/topic-forwarder
  - description: The image to use for the router
    name: ROUTER_REPO
    value: enmasseproject/qdrouterd
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: A valid tenant name for the instance
    name: TENANT
    required: true
  - description: A valid name for the instance
    name: NAME
    required: true
  - description: The address to use for the topic
    name: ADDRESS
    required: true
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      app: enmasse
    name: tls-topic-persisted
  objects:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: enmasse
        group_id: "${NAME}"
        tenant: "${TENANT}"
      name: pvc-${TENANT}-${NAME}
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: "${STORAGE_CAPACITY}"
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        address_config: address-config-${TENANT}-${NAME}
        app: enmasse
        group_id: "${NAME}"
        tenant: "${TENANT}"
      name: "${TENANT}-${NAME}"
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            app: enmasse
            group_id: "${NAME}"
            role: broker
            tenant: "${TENANT}"
        spec:
          containers:
          - env:
            - name: TOPIC_NAME
              value: "${ADDRESS}"
            - name: GROUP_ID
              value: "${NAME}"
            image: "${BROKER_REPO}:latest"
            lifecycle:
              preStop:
                exec:
                  command:
                  - "/opt/artemis-shutdown-hook/bin/artemis-shutdown-hook"
            livenessProbe:
              tcpSocket:
                port: amqp
            name: broker
            ports:
            - containerPort: 5673
              name: amqp
            - containerPort: 61616
              name: core
            volumeMounts:
            - mountPath: "/var/run/artemis"
              name: vol-${TENANT}-${NAME}
          - env:
            - name: LINK_CAPACITY
              value: "${ROUTER_LINK_CAPACITY}"
            - name: TOPIC_NAME
              value: "${ADDRESS}"
            image: "${ROUTER_REPO}:latest"
            livenessProbe:
              tcpSocket:
                port: amqp
            name: router
            ports:
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 55673
              name: internal
              protocol: TCP
            - containerPort: 5671
              name: amqps
              protocol: TCP
            resources:
              limits:
                memory: 256Mi
              requests:
                memory: 256Mi
            volumeMounts:
            - mountPath: "/etc/qpid-dispatch/ssl"
              name: ssl-certs
              readOnly: true
          - env:
            - name: TOPIC_NAME
              value: "${ADDRESS}"
            image: "${TOPIC_FORWARDER_REPO}:latest"
            livenessProbe:
              httpGet:
                path: "/health"
                port: health
            name: forwarder
            ports:
            - containerPort: 8080
              name: health
            resources:
              limits:
                memory: 128Mi
              requests:
                memory: 128Mi
          volumes:
          - name: vol-${TENANT}-${NAME}
            persistentVolumeClaim:
              claimName: pvc-${TENANT}-${NAME}
          - name: ssl-certs
            secret:
              secretName: qdrouterd-certs
  - apiVersion: v1
    data:
      "${ADDRESS}": '{"store_and_forward": true, "multicast": true}'
    kind: ConfigMap
    metadata:
      labels:
        app: enmasse
        group_id: "${NAME}"
        tenant: "${TENANT}"
        type: address-config
      name: address-config-${TENANT}-${NAME}
  parameters:
  - description: Storage capacity required for volume claims
    name: STORAGE_CAPACITY
    value: 2Gi
  - description: The docker image to use for the message broker
    name: BROKER_REPO
    value: enmasseproject/artemis
  - description: The default image to use as topic forwarder
    name: TOPIC_FORWARDER_REPO
    value: enmasseproject/topic-forwarder
  - description: The image to use for the router
    name: ROUTER_REPO
    value: enmasseproject/qdrouterd
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: A valid tenant name for the instance
    name: TENANT
    required: true
  - description: A valid name for the instance
    name: NAME
    required: true
  - description: The address to use for the topic
    name: ADDRESS
    required: true
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      app: enmasse
    name: direct
  objects:
  - apiVersion: v1
    data:
      "${ADDRESS}": '{"store_and_forward":false, "multicast": ${MULTICAST}}'
    kind: ConfigMap
    metadata:
      labels:
        app: enmasse
        group_id: "${NAME}"
        type: address-config
      name: address-config-${NAME}
  parameters:
  - description: A valid name for the instance
    name: NAME
    required: true
  - description: The address to use for the address
    name: ADDRESS
    required: true
  - description: If the address should have multicast semantics or not
    name: MULTICAST
    required: true
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      app: enmasse
    name: tls-enmasse-tenant-infra
  objects:
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        app: enmasse
        name: qdrouterd
        tenant: "${TENANT}"
      name: "${TENANT}-qdrouterd"
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            app: enmasse
            capability: router
            name: qdrouterd
            tenant: "${TENANT}"
        spec:
          containers:
          - env:
            - name: LINK_CAPACITY
              value: "${ROUTER_LINK_CAPACITY}"
            image: "${ROUTER_REPO}:latest"
            livenessProbe:
              tcpSocket:
                port: amqp
            name: router
            ports:
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 55673
              name: internal
              protocol: TCP
            - containerPort: 5671
              name: amqps
              protocol: TCP
            volumeMounts:
            - mountPath: "/etc/qpid-dispatch/ssl"
              name: ssl-certs
              readOnly: true
          volumes:
          - name: ssl-certs
            secret:
              secretName: qdrouterd-certs
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        service.alpha.openshift.io/dependencies: '[{"kind": "Service", "name": "admin",
          "namespace": ""}, {"kind": "Service", "name": "subscription", "namespace":
          ""}, {"kind": "Service", "name": "mqtt", "namespace": ""}]'
        service.alpha.openshift.io/infrastructure: 'true'
      labels:
        app: enmasse
        tenant: "${TENANT}"
      name: messaging
    spec:
      ports:
      - name: amqp
        port: 5672
        protocol: TCP
        targetPort: 5672
      - name: amqps
        port: 5671
        protocol: TCP
        targetPort: 5671
      - name: internal
        port: 55673
        protocol: TCP
        targetPort: 55673
      selector:
        capability: router
        tenant: "${TENANT}"
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        app: enmasse
        name: subserv
        tenant: "${TENANT}"
      name: "${TENANT}-subserv"
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            app: enmasse
            name: subserv
            tenant: "${TENANT}"
        spec:
          containers:
          - env: []
            image: "${SUBSERV_REPO}:latest"
            livenessProbe:
              tcpSocket:
                port: amqp
            name: subserv
            ports:
            - containerPort: 5672
              name: amqp
              protocol: TCP
            resources:
              limits:
                memory: 64Mi
              requests:
                memory: 64Mi
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: enmasse
        tenant: "${TENANT}"
      name: subscription
    spec:
      ports:
      - name: amqp
        port: 5672
        protocol: TCP
        targetPort: 5672
      selector:
        name: subserv
        tenant: "${TENANT}"
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        app: enmasse
        name: mqtt-gateway
        tenant: "${TENANT}"
      name: "${TENANT}-mqtt-gateway"
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            app: enmasse
            name: mqtt-gateway
            tenant: "${TENANT}"
        spec:
          containers:
          - image: "${MQTT_GATEWAY_REPO}:latest"
            livenessProbe:
              initialDelaySeconds: 60
              tcpSocket:
                port: secure-mqtt
            name: mqtt-gateway-tls
            ports:
            - containerPort: 8883
              name: secure-mqtt
              protocol: TCP
            volumeMounts:
            - mountPath: "/etc/mqtt-gateway/ssl"
              name: ssl-certs
              readOnly: true
          - image: "${MQTT_GATEWAY_REPO}:latest"
            livenessProbe:
              initialDelaySeconds: 60
              tcpSocket:
                port: mqtt
            name: mqtt-gateway
            ports:
            - containerPort: 1883
              name: mqtt
              protocol: TCP
          volumes:
          - name: ssl-certs
            secret:
              secretName: mqtt-certs
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: enmasse
        tenant: "${TENANT}"
      name: mqtt
    spec:
      ports:
      - name: mqtt
        port: 1883
        protocol: TCP
        targetPort: 1883
      - name: secure-mqtt
        port: 8883
        protocol: TCP
        targetPort: 8883
      selector:
        name: mqtt-gateway
        tenant: "${TENANT}"
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        app: enmasse
        name: mqtt-lwt
        tenant: "${TENANT}"
      name: "${TENANT}-mqtt-lwt"
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            app: enmasse
            name: mqtt-lwt
            tenant: "${TENANT}"
        spec:
          containers:
          - image: "${MQTT_LWT_REPO}:latest"
            name: mqtt-lwt
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        app: enmasse
        name: admin
        tenant: "${TENANT}"
      name: "${TENANT}-admin"
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            app: enmasse
            name: admin
            tenant: "${TENANT}"
        spec:
          containers:
          - env:
            - name: CONFIGURATION_SERVICE_HOST
              value: localhost
            - name: CONFIGURATION_SERVICE_PORT
              value: '5672'
            image: "${RAGENT_REPO}:latest"
            livenessProbe:
              tcpSocket:
                port: amqp
            name: ragent
            ports:
            - containerPort: 55672
              name: amqp
              protocol: TCP
            resources:
              limits:
                memory: 64Mi
              requests:
                memory: 64Mi
          - env:
            - name: CONFIGURATION_SERVICE_HOST
              value: localhost
            - name: CONFIGURATION_SERVICE_PORT
              value: '5672'
            image: "${QUEUE_SCHEDULER_REPO}:latest"
            livenessProbe:
              tcpSocket:
                port: amqp
            name: queue-scheduler
            ports:
            - containerPort: 55667
              name: amqp
              protocol: TCP
            resources:
              limits:
                memory: 128Mi
              requests:
                memory: 128Mi
          - env: []
            image: "${CONFIGSERV_REPO}:latest"
            livenessProbe:
              tcpSocket:
                port: amqp
            name: configserv
            ports:
            - containerPort: 5672
              name: amqp
              protocol: TCP
            resources:
              limits:
                memory: 256Mi
              requests:
                memory: 256Mi
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: enmasse
        tenant: "${TENANT}"
      name: admin
    spec:
      ports:
      - name: ragent
        port: 55672
      - name: configuration
        port: 5672
      - name: queue-scheduler
        port: 55667
      selector:
        name: admin
        tenant: "${TENANT}"
  parameters:
  - description: The image to use for the router
    name: ROUTER_REPO
    value: enmasseproject/qdrouterd
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: The image to use for the configuration service
    name: CONFIGSERV_REPO
    value: enmasseproject/configserv
  - description: The docker image to use for the queue scheduler
    name: QUEUE_SCHEDULER_REPO
    value: enmasseproject/queue-scheduler
  - description: The image to use for the router agent
    name: RAGENT_REPO
    value: enmasseproject/ragent
  - description: The image to use for the subscription services
    name: SUBSERV_REPO
    value: enmasseproject/subserv
  - description: The hostname to use for the exposed route for messaging (TLS only)
    name: MESSAGING_HOSTNAME
  - description: The image to use for the MQTT gateway
    name: MQTT_GATEWAY_REPO
    value: enmasseproject/mqtt-gateway
  - description: The hostname to use for the exposed route for MQTT (TLS only)
    name: MQTT_GATEWAY_HOSTNAME
  - description: The image to use for the MQTT LWT
    name: MQTT_LWT_REPO
    value: enmasseproject/mqtt-lwt
  - description: The tenant this infrastructure is deployed for
    name: TENANT
    required: true
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      app: enmasse
      name: address-controller
    name: address-controller
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          app: enmasse
          name: address-controller
      spec:
        containers:
        - env:
          - name: MULTITENANT
            value: "${MULTITENANT}"
          - name: TLS
            value: 'true'
          image: "${ADDRESS_CONTROLLER_REPO}:latest"
          livenessProbe:
            tcpSocket:
              port: amqp
          name: address-controller
          ports:
          - containerPort: 5672
            name: amqp
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          resources:
            limits:
              memory: 256Mi
            requests:
              memory: 256Mi
        serviceAccount: deployer
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: enmasse
    name: address-controller
  spec:
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
    - name: amqp
      port: 5672
      protocol: TCP
      targetPort: amqp
    selector:
      name: address-controller
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: enmasse
    name: restapi
  spec:
    host: "${RESTAPI_HOSTNAME}"
    path: "/v3/address"
    port:
      targetPort: http
    to:
      kind: Service
      name: address-controller
- apiVersion: v1
  data:
    json: '{"large-persisted-queue": {"description": "Large queue with persistence",
      "templateName": "tls-queue-persisted", "templateParameters": {"STORAGE_CAPACITY":
      "10Gi"}, "type": "queue"}, "large-persisted-topic": {"description": "Large topic
      with persistence", "templateName": "tls-topic-persisted", "templateParameters":
      {"STORAGE_CAPACITY": "10Gi"}, "type": "topic"}, "small-persisted-queue": {"description":
      "Small queue with persistence", "templateName": "tls-queue-persisted", "templateParameters":
      {"STORAGE_CAPACITY": "1Gi"}, "type": "queue"}, "small-persisted-topic": {"description":
      "Small topic with persistence", "templateName": "tls-topic-persisted", "templateParameters":
      {"STORAGE_CAPACITY": "1Gi"}, "type": "topic"}, "vanilla-queue": {"description":
      "Simple in memory queue", "templateName": "tls-queue-inmemory", "type": "queue"},
      "vanilla-topic": {"description": "Simple in memory topic", "templateName": "tls-topic-inmemory",
      "type": "topic"}}'
  kind: ConfigMap
  metadata:
    labels:
      app: enmasse
    name: flavor
parameters:
- description: The hostname to use for the exposed route for the REST API
  name: RESTAPI_HOSTNAME
- description: If set to true, the address controller will deploy infrastructure to
    separate namespaces
  name: MULTITENANT
  value: 'false'
- description: The docker image to use for the address controller
  name: ADDRESS_CONTROLLER_REPO
  value: enmasseproject/address-controller
