// Code generated by goyacc -o filter.go -p Filter filter.y. DO NOT EDIT.

//line filter.y:10
package filter

import __yyfmt__ "fmt"

//line filter.y:10

func setParseTree(yylex interface{}, expr Expr) {
	yylex.(*lexer).expr = expr
}

//line filter.y:18
type FilterSymType struct {
	yys           int
	bytes         []byte
	stringValue   StringVal
	integralValue IntVal
	floatValue    FloatVal
	jsonPathValue JSONPathVal
	boolVal       BoolVal

	expr Expr
	str  string
}

const OR = 57346
const AND = 57347
const NOT = 57348
const LE = 57349
const GE = 57350
const NE = 57351
const LIKE = 57352
const IS = 57353
const STRING = 57354
const INTEGRAL = 57355
const FLOAT = 57356
const JSON_PATH = 57357
const NULL = 57358
const TRUE = 57359
const FALSE = 57360

var FilterToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"OR",
	"AND",
	"NOT",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"LIKE",
	"IS",
	"'('",
	"')'",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"JSON_PATH",
	"NULL",
	"TRUE",
	"FALSE",
}
var FilterStatenames = [...]string{}

const FilterEofCode = 1
const FilterErrCode = 2
const FilterInitialStackSize = 16

//line yacctab:1
var FilterExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	1, 7,
	4, 7,
	5, 7,
	16, 7,
	-2, 14,
}

const FilterPrivate = 57344

const FilterLast = 56

var FilterAct = [...]int{

	6, 5, 7, 11, 12, 13, 14, 15, 8, 9,
	4, 38, 11, 12, 13, 14, 15, 8, 9, 40,
	36, 34, 34, 33, 35, 16, 37, 22, 24, 25,
	26, 27, 28, 29, 21, 23, 2, 34, 1, 39,
	10, 18, 19, 17, 16, 17, 16, 20, 3, 0,
	0, 0, 0, 30, 31, 32,
}
var FilterPact = [...]int{

	-5, -1000, 41, -1000, -5, -5, -1000, 21, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -5, -5, 39, -1000,
	-14, -14, 7, 5, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 20, -1000, -1000, -1000, -1000, -14, -1000, -2, -1000,
	-1000,
}
var FilterPgo = [...]int{

	0, 36, 48, 47, 40, 2, 0, 38,
}
var FilterR1 = [...]int{

	0, 7, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 5, 5, 3, 3, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 6, 6,
}
var FilterR2 = [...]int{

	0, 1, 1, 3, 3, 3, 2, 1, 3, 3,
	4, 3, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var FilterChk = [...]int{

	-1000, -7, -1, -2, 15, 6, -6, -5, 22, 23,
	-4, 17, 18, 19, 20, 21, 5, 4, -1, -1,
	-3, 13, 6, 14, 7, 8, 9, 10, 11, 12,
	-1, -1, 16, -5, -6, -5, 13, 21, 6, -5,
	21,
}
var FilterDef = [...]int{

	0, -2, 1, 2, 0, 0, -2, 0, 26, 27,
	13, 21, 22, 23, 24, 25, 0, 0, 0, 6,
	0, 0, 0, 0, 15, 16, 17, 18, 19, 20,
	4, 5, 3, 8, 14, 9, 0, 11, 0, 10,
	12,
}
var FilterTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	15, 16, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	8, 7, 9,
}
var FilterTok2 = [...]int{

	2, 3, 4, 5, 6, 10, 11, 12, 13, 14,
	17, 18, 19, 20, 21, 22, 23,
}
var FilterTok3 = [...]int{
	0,
}

var FilterErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	FilterDebug        = 0
	FilterErrorVerbose = false
)

type FilterLexer interface {
	Lex(lval *FilterSymType) int
	Error(s string)
}

type FilterParser interface {
	Parse(FilterLexer) int
	Lookahead() int
}

type FilterParserImpl struct {
	lval  FilterSymType
	stack [FilterInitialStackSize]FilterSymType
	char  int
}

func (p *FilterParserImpl) Lookahead() int {
	return p.char
}

func FilterNewParser() FilterParser {
	return &FilterParserImpl{}
}

const FilterFlag = -1000

func FilterTokname(c int) string {
	if c >= 1 && c-1 < len(FilterToknames) {
		if FilterToknames[c-1] != "" {
			return FilterToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func FilterStatname(s int) string {
	if s >= 0 && s < len(FilterStatenames) {
		if FilterStatenames[s] != "" {
			return FilterStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func FilterErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !FilterErrorVerbose {
		return "syntax error"
	}

	for _, e := range FilterErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + FilterTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := FilterPact[state]
	for tok := TOKSTART; tok-1 < len(FilterToknames); tok++ {
		if n := base + tok; n >= 0 && n < FilterLast && FilterChk[FilterAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if FilterDef[state] == -2 {
		i := 0
		for FilterExca[i] != -1 || FilterExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; FilterExca[i] >= 0; i += 2 {
			tok := FilterExca[i]
			if tok < TOKSTART || FilterExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if FilterExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += FilterTokname(tok)
	}
	return res
}

func Filterlex1(lex FilterLexer, lval *FilterSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = FilterTok1[0]
		goto out
	}
	if char < len(FilterTok1) {
		token = FilterTok1[char]
		goto out
	}
	if char >= FilterPrivate {
		if char < FilterPrivate+len(FilterTok2) {
			token = FilterTok2[char-FilterPrivate]
			goto out
		}
	}
	for i := 0; i < len(FilterTok3); i += 2 {
		token = FilterTok3[i+0]
		if token == char {
			token = FilterTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = FilterTok2[1] /* unknown char */
	}
	if FilterDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", FilterTokname(token), uint(char))
	}
	return char, token
}

func FilterParse(Filterlex FilterLexer) int {
	return FilterNewParser().Parse(Filterlex)
}

func (Filterrcvr *FilterParserImpl) Parse(Filterlex FilterLexer) int {
	var Filtern int
	var FilterVAL FilterSymType
	var FilterDollar []FilterSymType
	_ = FilterDollar // silence set and not used
	FilterS := Filterrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Filterstate := 0
	Filterrcvr.char = -1
	Filtertoken := -1 // Filterrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		Filterstate = -1
		Filterrcvr.char = -1
		Filtertoken = -1
	}()
	Filterp := -1
	goto Filterstack

ret0:
	return 0

ret1:
	return 1

Filterstack:
	/* put a state and value onto the stack */
	if FilterDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", FilterTokname(Filtertoken), FilterStatname(Filterstate))
	}

	Filterp++
	if Filterp >= len(FilterS) {
		nyys := make([]FilterSymType, len(FilterS)*2)
		copy(nyys, FilterS)
		FilterS = nyys
	}
	FilterS[Filterp] = FilterVAL
	FilterS[Filterp].yys = Filterstate

Filternewstate:
	Filtern = FilterPact[Filterstate]
	if Filtern <= FilterFlag {
		goto Filterdefault /* simple state */
	}
	if Filterrcvr.char < 0 {
		Filterrcvr.char, Filtertoken = Filterlex1(Filterlex, &Filterrcvr.lval)
	}
	Filtern += Filtertoken
	if Filtern < 0 || Filtern >= FilterLast {
		goto Filterdefault
	}
	Filtern = FilterAct[Filtern]
	if FilterChk[Filtern] == Filtertoken { /* valid shift */
		Filterrcvr.char = -1
		Filtertoken = -1
		FilterVAL = Filterrcvr.lval
		Filterstate = Filtern
		if Errflag > 0 {
			Errflag--
		}
		goto Filterstack
	}

Filterdefault:
	/* default state action */
	Filtern = FilterDef[Filterstate]
	if Filtern == -2 {
		if Filterrcvr.char < 0 {
			Filterrcvr.char, Filtertoken = Filterlex1(Filterlex, &Filterrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if FilterExca[xi+0] == -1 && FilterExca[xi+1] == Filterstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Filtern = FilterExca[xi+0]
			if Filtern < 0 || Filtern == Filtertoken {
				break
			}
		}
		Filtern = FilterExca[xi+1]
		if Filtern < 0 {
			goto ret0
		}
	}
	if Filtern == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Filterlex.Error(FilterErrorMessage(Filterstate, Filtertoken))
			Nerrs++
			if FilterDebug >= 1 {
				__yyfmt__.Printf("%s", FilterStatname(Filterstate))
				__yyfmt__.Printf(" saw %s\n", FilterTokname(Filtertoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Filterp >= 0 {
				Filtern = FilterPact[FilterS[Filterp].yys] + FilterErrCode
				if Filtern >= 0 && Filtern < FilterLast {
					Filterstate = FilterAct[Filtern] /* simulate a shift of "error" */
					if FilterChk[Filterstate] == FilterErrCode {
						goto Filterstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if FilterDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", FilterS[Filterp].yys)
				}
				Filterp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if FilterDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", FilterTokname(Filtertoken))
			}
			if Filtertoken == FilterEofCode {
				goto ret1
			}
			Filterrcvr.char = -1
			Filtertoken = -1
			goto Filternewstate /* try again in the same state */
		}
	}

	/* reduction by production Filtern */
	if FilterDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Filtern, FilterStatname(Filterstate))
	}

	Filternt := Filtern
	Filterpt := Filterp
	_ = Filterpt // guard against "declared and not used"

	Filterp -= FilterR2[Filtern]
	// Filterp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if Filterp+1 >= len(FilterS) {
		nyys := make([]FilterSymType, len(FilterS)*2)
		copy(nyys, FilterS)
		FilterS = nyys
	}
	FilterVAL = FilterS[Filterp+1]

	/* consult goto table to find next state */
	Filtern = FilterR1[Filtern]
	Filterg := FilterPgo[Filtern]
	Filterj := Filterg + FilterS[Filterp].yys + 1

	if Filterj >= FilterLast {
		Filterstate = FilterAct[Filterg]
	} else {
		Filterstate = FilterAct[Filterj]
		if FilterChk[Filterstate] != -Filtern {
			Filterstate = FilterAct[Filterg]
		}
	}
	// dummy call; replaced with literal code
	switch Filternt {

	case 1:
		FilterDollar = FilterS[Filterpt-1 : Filterpt+1]
//line filter.y:62
		{
			setParseTree(Filterlex, FilterDollar[1].expr)
		}
	case 2:
		FilterDollar = FilterS[Filterpt-1 : Filterpt+1]
//line filter.y:68
		{
			FilterVAL.expr = FilterDollar[1].expr
		}
	case 3:
		FilterDollar = FilterS[Filterpt-3 : Filterpt+1]
//line filter.y:72
		{
			FilterVAL.expr = NewBoolExpr(FilterDollar[2].expr)
		}
	case 4:
		FilterDollar = FilterS[Filterpt-3 : Filterpt+1]
//line filter.y:76
		{
			FilterVAL.expr = NewAndExpr(FilterDollar[1].expr, FilterDollar[3].expr)
		}
	case 5:
		FilterDollar = FilterS[Filterpt-3 : Filterpt+1]
//line filter.y:80
		{
			FilterVAL.expr = NewOrExpr(FilterDollar[1].expr, FilterDollar[3].expr)
		}
	case 6:
		FilterDollar = FilterS[Filterpt-2 : Filterpt+1]
//line filter.y:84
		{
			FilterVAL.expr = NewNotExpr(FilterDollar[2].expr)
		}
	case 7:
		FilterDollar = FilterS[Filterpt-1 : Filterpt+1]
//line filter.y:88
		{
			FilterVAL.expr = FilterDollar[1].boolVal
		}
	case 8:
		FilterDollar = FilterS[Filterpt-3 : Filterpt+1]
//line filter.y:94
		{
			FilterVAL.expr = NewComparisonExpr(FilterDollar[1].expr, FilterDollar[2].str, FilterDollar[3].expr)
		}
	case 9:
		FilterDollar = FilterS[Filterpt-3 : Filterpt+1]
//line filter.y:98
		{
			FilterVAL.expr = NewComparisonExpr(FilterDollar[1].expr, LikeStr, FilterDollar[3].expr)
		}
	case 10:
		FilterDollar = FilterS[Filterpt-4 : Filterpt+1]
//line filter.y:102
		{
			FilterVAL.expr = NewComparisonExpr(FilterDollar[1].expr, NotLikeStr, FilterDollar[4].expr)
		}
	case 11:
		FilterDollar = FilterS[Filterpt-3 : Filterpt+1]
//line filter.y:106
		{
			FilterVAL.expr = NewIsNullExpr(FilterDollar[1].expr, IsNull)
		}
	case 12:
		FilterDollar = FilterS[Filterpt-4 : Filterpt+1]
//line filter.y:110
		{
			FilterVAL.expr = NewIsNullExpr(FilterDollar[1].expr, IsNotNull)
		}
	case 13:
		FilterDollar = FilterS[Filterpt-1 : Filterpt+1]
//line filter.y:117
		{
			FilterVAL.expr = FilterDollar[1].expr
		}
	case 14:
		FilterDollar = FilterS[Filterpt-1 : Filterpt+1]
//line filter.y:121
		{
			FilterVAL.expr = FilterDollar[1].boolVal
		}
	case 15:
		FilterDollar = FilterS[Filterpt-1 : Filterpt+1]
//line filter.y:127
		{
			FilterVAL.str = EqualStr
		}
	case 16:
		FilterDollar = FilterS[Filterpt-1 : Filterpt+1]
//line filter.y:131
		{
			FilterVAL.str = LessThanStr
		}
	case 17:
		FilterDollar = FilterS[Filterpt-1 : Filterpt+1]
//line filter.y:135
		{
			FilterVAL.str = GreaterThanStr
		}
	case 18:
		FilterDollar = FilterS[Filterpt-1 : Filterpt+1]
//line filter.y:139
		{
			FilterVAL.str = LessEqualStr
		}
	case 19:
		FilterDollar = FilterS[Filterpt-1 : Filterpt+1]
//line filter.y:143
		{
			FilterVAL.str = GreaterEqualStr
		}
	case 20:
		FilterDollar = FilterS[Filterpt-1 : Filterpt+1]
//line filter.y:147
		{
			FilterVAL.str = NotEqualStr
		}
	case 21:
		FilterDollar = FilterS[Filterpt-1 : Filterpt+1]
//line filter.y:153
		{
			FilterVAL.expr = StringVal(FilterDollar[1].stringValue)
		}
	case 22:
		FilterDollar = FilterS[Filterpt-1 : Filterpt+1]
//line filter.y:157
		{
			FilterVAL.expr = IntVal(FilterDollar[1].integralValue)
		}
	case 23:
		FilterDollar = FilterS[Filterpt-1 : Filterpt+1]
//line filter.y:161
		{
			FilterVAL.expr = FloatVal(FilterDollar[1].floatValue)
		}
	case 24:
		FilterDollar = FilterS[Filterpt-1 : Filterpt+1]
//line filter.y:165
		{
			FilterVAL.expr = FilterDollar[1].jsonPathValue
		}
	case 25:
		FilterDollar = FilterS[Filterpt-1 : Filterpt+1]
//line filter.y:169
		{
			FilterVAL.expr = NewNullVal()
		}
	case 26:
		FilterDollar = FilterS[Filterpt-1 : Filterpt+1]
//line filter.y:175
		{
			FilterVAL.boolVal = BoolVal(true)
		}
	case 27:
		FilterDollar = FilterS[Filterpt-1 : Filterpt+1]
//line filter.y:179
		{
			FilterVAL.boolVal = BoolVal(false)
		}
	}
	goto Filterstack /* stack new state and value */
}
