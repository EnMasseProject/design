// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package resolvers

import (
	"fmt"
	"io"
	"strconv"

	"github.com/enmasseproject/enmasse/pkg/apis/enmasse/v1"
	"github.com/enmasseproject/enmasse/pkg/consolegraphql"
)

type AddressQueryResultConsoleapiEnmasseIoV1 struct {
	Total     int                             `json:"total"`
	Addresses []*consolegraphql.AddressHolder `json:"addresses"`
}

type ConnectionQueryResultConsoleapiEnmasseIoV1 struct {
	Total       int                          `json:"total"`
	Connections []*consolegraphql.Connection `json:"connections"`
}

type KeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type LinkQueryResultConsoleapiEnmasseIoV1 struct {
	Total int                    `json:"total"`
	Links []*consolegraphql.Link `json:"links"`
}

type MessagingEndpointQueryResultConsoleapiEnmasseIoV1 struct {
	Total              int                     `json:"total"`
	MessagingEndpoints []*v1.MessagingEndpoint `json:"messagingEndpoints"`
}

type MessagingProjectQueryResultConsoleapiEnmasseIoV1 struct {
	Total             int                                      `json:"total"`
	MessagingProjects []*consolegraphql.MessagingProjectHolder `json:"messagingProjects"`
}

type MetadataConsoleapiEnmasseIoV1 struct {
	Annotations       []*KeyValue `json:"annotations"`
	Name              string      `json:"name"`
	Namespace         string      `json:"namespace"`
	ResourceVersion   string      `json:"resourceVersion"`
	CreationTimestamp string      `json:"creationTimestamp"`
	UID               string      `json:"uid"`
}

type AddressType string

const (
	AddressTypeQueue        AddressType = "queue"
	AddressTypeTopic        AddressType = "topic"
	AddressTypeSubscription AddressType = "subscription"
	AddressTypeMulticast    AddressType = "multicast"
	AddressTypeAnycast      AddressType = "anycast"
	AddressTypeDeadLetter   AddressType = "deadLetter"
)

var AllAddressType = []AddressType{
	AddressTypeQueue,
	AddressTypeTopic,
	AddressTypeSubscription,
	AddressTypeMulticast,
	AddressTypeAnycast,
	AddressTypeDeadLetter,
}

func (e AddressType) IsValid() bool {
	switch e {
	case AddressTypeQueue, AddressTypeTopic, AddressTypeSubscription, AddressTypeMulticast, AddressTypeAnycast, AddressTypeDeadLetter:
		return true
	}
	return false
}

func (e AddressType) String() string {
	return string(e)
}

func (e *AddressType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AddressType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AddressType", str)
	}
	return nil
}

func (e AddressType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LinkRole string

const (
	LinkRoleSender   LinkRole = "sender"
	LinkRoleReceiver LinkRole = "receiver"
)

var AllLinkRole = []LinkRole{
	LinkRoleSender,
	LinkRoleReceiver,
}

func (e LinkRole) IsValid() bool {
	switch e {
	case LinkRoleSender, LinkRoleReceiver:
		return true
	}
	return false
}

func (e LinkRole) String() string {
	return string(e)
}

func (e *LinkRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LinkRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LinkRole", str)
	}
	return nil
}

func (e LinkRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MessagingCapabilityEnmasseIoV1 string

const (
	MessagingCapabilityEnmasseIoV1Transactional MessagingCapabilityEnmasseIoV1 = "transactional"
)

var AllMessagingCapabilityEnmasseIoV1 = []MessagingCapabilityEnmasseIoV1{
	MessagingCapabilityEnmasseIoV1Transactional,
}

func (e MessagingCapabilityEnmasseIoV1) IsValid() bool {
	switch e {
	case MessagingCapabilityEnmasseIoV1Transactional:
		return true
	}
	return false
}

func (e MessagingCapabilityEnmasseIoV1) String() string {
	return string(e)
}

func (e *MessagingCapabilityEnmasseIoV1) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MessagingCapabilityEnmasseIoV1(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MessagingCapability_enmasse_io_v1", str)
	}
	return nil
}

func (e MessagingCapabilityEnmasseIoV1) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MetricType string

const (
	MetricTypeGauge   MetricType = "gauge"
	MetricTypeCounter MetricType = "counter"
	MetricTypeRate    MetricType = "rate"
)

var AllMetricType = []MetricType{
	MetricTypeGauge,
	MetricTypeCounter,
	MetricTypeRate,
}

func (e MetricType) IsValid() bool {
	switch e {
	case MetricTypeGauge, MetricTypeCounter, MetricTypeRate:
		return true
	}
	return false
}

func (e MetricType) String() string {
	return string(e)
}

func (e *MetricType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetricType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetricType", str)
	}
	return nil
}

func (e MetricType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Protocol string

const (
	ProtocolAmqp  Protocol = "amqp"
	ProtocolAmqps Protocol = "amqps"
)

var AllProtocol = []Protocol{
	ProtocolAmqp,
	ProtocolAmqps,
}

func (e Protocol) IsValid() bool {
	switch e {
	case ProtocolAmqp, ProtocolAmqps:
		return true
	}
	return false
}

func (e Protocol) String() string {
	return string(e)
}

func (e *Protocol) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Protocol(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Protocol", str)
	}
	return nil
}

func (e Protocol) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
