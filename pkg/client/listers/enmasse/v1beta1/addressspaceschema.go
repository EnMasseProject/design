/*
 * Copyright 2018-2019, EnMasse authors.
 * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/enmasseproject/enmasse/pkg/apis/enmasse/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AddressSpaceSchemaLister helps list AddressSpaceSchemas.
type AddressSpaceSchemaLister interface {
	// List lists all AddressSpaceSchemas in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.AddressSpaceSchema, err error)
	// Get retrieves the AddressSpaceSchema from the index for a given name.
	Get(name string) (*v1beta1.AddressSpaceSchema, error)
	AddressSpaceSchemaListerExpansion
}

// addressSpaceSchemaLister implements the AddressSpaceSchemaLister interface.
type addressSpaceSchemaLister struct {
	indexer cache.Indexer
}

// NewAddressSpaceSchemaLister returns a new AddressSpaceSchemaLister.
func NewAddressSpaceSchemaLister(indexer cache.Indexer) AddressSpaceSchemaLister {
	return &addressSpaceSchemaLister{indexer: indexer}
}

// List lists all AddressSpaceSchemas in the indexer.
func (s *addressSpaceSchemaLister) List(selector labels.Selector) (ret []*v1beta1.AddressSpaceSchema, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.AddressSpaceSchema))
	})
	return ret, err
}

// Get retrieves the AddressSpaceSchema from the index for a given name.
func (s *addressSpaceSchemaLister) Get(name string) (*v1beta1.AddressSpaceSchema, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("addressspaceschema"), name)
	}
	return obj.(*v1beta1.AddressSpaceSchema), nil
}
