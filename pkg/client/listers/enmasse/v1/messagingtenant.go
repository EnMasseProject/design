/*
 * Copyright 2018-2019, EnMasse authors.
 * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/enmasseproject/enmasse/pkg/apis/enmasse/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MessagingTenantLister helps list MessagingTenants.
type MessagingTenantLister interface {
	// List lists all MessagingTenants in the indexer.
	List(selector labels.Selector) (ret []*v1.MessagingTenant, err error)
	// MessagingTenants returns an object that can list and get MessagingTenants.
	MessagingTenants(namespace string) MessagingTenantNamespaceLister
	MessagingTenantListerExpansion
}

// messagingTenantLister implements the MessagingTenantLister interface.
type messagingTenantLister struct {
	indexer cache.Indexer
}

// NewMessagingTenantLister returns a new MessagingTenantLister.
func NewMessagingTenantLister(indexer cache.Indexer) MessagingTenantLister {
	return &messagingTenantLister{indexer: indexer}
}

// List lists all MessagingTenants in the indexer.
func (s *messagingTenantLister) List(selector labels.Selector) (ret []*v1.MessagingTenant, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MessagingTenant))
	})
	return ret, err
}

// MessagingTenants returns an object that can list and get MessagingTenants.
func (s *messagingTenantLister) MessagingTenants(namespace string) MessagingTenantNamespaceLister {
	return messagingTenantNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MessagingTenantNamespaceLister helps list and get MessagingTenants.
type MessagingTenantNamespaceLister interface {
	// List lists all MessagingTenants in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.MessagingTenant, err error)
	// Get retrieves the MessagingTenant from the indexer for a given namespace and name.
	Get(name string) (*v1.MessagingTenant, error)
	MessagingTenantNamespaceListerExpansion
}

// messagingTenantNamespaceLister implements the MessagingTenantNamespaceLister
// interface.
type messagingTenantNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MessagingTenants in the indexer for a given namespace.
func (s messagingTenantNamespaceLister) List(selector labels.Selector) (ret []*v1.MessagingTenant, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MessagingTenant))
	})
	return ret, err
}

// Get retrieves the MessagingTenant from the indexer for a given namespace and name.
func (s messagingTenantNamespaceLister) Get(name string) (*v1.MessagingTenant, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("messagingtenant"), name)
	}
	return obj.(*v1.MessagingTenant), nil
}
