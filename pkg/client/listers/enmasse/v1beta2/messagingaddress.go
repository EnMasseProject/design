/*
 * Copyright 2018-2019, EnMasse authors.
 * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1beta2

import (
	v1beta2 "github.com/enmasseproject/enmasse/pkg/apis/enmasse/v1beta2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MessagingAddressLister helps list MessagingAddresses.
type MessagingAddressLister interface {
	// List lists all MessagingAddresses in the indexer.
	List(selector labels.Selector) (ret []*v1beta2.MessagingAddress, err error)
	// MessagingAddresses returns an object that can list and get MessagingAddresses.
	MessagingAddresses(namespace string) MessagingAddressNamespaceLister
	MessagingAddressListerExpansion
}

// messagingAddressLister implements the MessagingAddressLister interface.
type messagingAddressLister struct {
	indexer cache.Indexer
}

// NewMessagingAddressLister returns a new MessagingAddressLister.
func NewMessagingAddressLister(indexer cache.Indexer) MessagingAddressLister {
	return &messagingAddressLister{indexer: indexer}
}

// List lists all MessagingAddresses in the indexer.
func (s *messagingAddressLister) List(selector labels.Selector) (ret []*v1beta2.MessagingAddress, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.MessagingAddress))
	})
	return ret, err
}

// MessagingAddresses returns an object that can list and get MessagingAddresses.
func (s *messagingAddressLister) MessagingAddresses(namespace string) MessagingAddressNamespaceLister {
	return messagingAddressNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MessagingAddressNamespaceLister helps list and get MessagingAddresses.
type MessagingAddressNamespaceLister interface {
	// List lists all MessagingAddresses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta2.MessagingAddress, err error)
	// Get retrieves the MessagingAddress from the indexer for a given namespace and name.
	Get(name string) (*v1beta2.MessagingAddress, error)
	MessagingAddressNamespaceListerExpansion
}

// messagingAddressNamespaceLister implements the MessagingAddressNamespaceLister
// interface.
type messagingAddressNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MessagingAddresses in the indexer for a given namespace.
func (s messagingAddressNamespaceLister) List(selector labels.Selector) (ret []*v1beta2.MessagingAddress, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.MessagingAddress))
	})
	return ret, err
}

// Get retrieves the MessagingAddress from the indexer for a given namespace and name.
func (s messagingAddressNamespaceLister) Get(name string) (*v1beta2.MessagingAddress, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta2.Resource("messagingaddress"), name)
	}
	return obj.(*v1beta2.MessagingAddress), nil
}
