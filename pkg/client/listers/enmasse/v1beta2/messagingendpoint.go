/*
 * Copyright 2018-2019, EnMasse authors.
 * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1beta2

import (
	v1beta2 "github.com/enmasseproject/enmasse/pkg/apis/enmasse/v1beta2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MessagingEndpointLister helps list MessagingEndpoints.
type MessagingEndpointLister interface {
	// List lists all MessagingEndpoints in the indexer.
	List(selector labels.Selector) (ret []*v1beta2.MessagingEndpoint, err error)
	// MessagingEndpoints returns an object that can list and get MessagingEndpoints.
	MessagingEndpoints(namespace string) MessagingEndpointNamespaceLister
	MessagingEndpointListerExpansion
}

// messagingEndpointLister implements the MessagingEndpointLister interface.
type messagingEndpointLister struct {
	indexer cache.Indexer
}

// NewMessagingEndpointLister returns a new MessagingEndpointLister.
func NewMessagingEndpointLister(indexer cache.Indexer) MessagingEndpointLister {
	return &messagingEndpointLister{indexer: indexer}
}

// List lists all MessagingEndpoints in the indexer.
func (s *messagingEndpointLister) List(selector labels.Selector) (ret []*v1beta2.MessagingEndpoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.MessagingEndpoint))
	})
	return ret, err
}

// MessagingEndpoints returns an object that can list and get MessagingEndpoints.
func (s *messagingEndpointLister) MessagingEndpoints(namespace string) MessagingEndpointNamespaceLister {
	return messagingEndpointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MessagingEndpointNamespaceLister helps list and get MessagingEndpoints.
type MessagingEndpointNamespaceLister interface {
	// List lists all MessagingEndpoints in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta2.MessagingEndpoint, err error)
	// Get retrieves the MessagingEndpoint from the indexer for a given namespace and name.
	Get(name string) (*v1beta2.MessagingEndpoint, error)
	MessagingEndpointNamespaceListerExpansion
}

// messagingEndpointNamespaceLister implements the MessagingEndpointNamespaceLister
// interface.
type messagingEndpointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MessagingEndpoints in the indexer for a given namespace.
func (s messagingEndpointNamespaceLister) List(selector labels.Selector) (ret []*v1beta2.MessagingEndpoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.MessagingEndpoint))
	})
	return ret, err
}

// Get retrieves the MessagingEndpoint from the indexer for a given namespace and name.
func (s messagingEndpointNamespaceLister) Get(name string) (*v1beta2.MessagingEndpoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta2.Resource("messagingendpoint"), name)
	}
	return obj.(*v1beta2.MessagingEndpoint), nil
}
