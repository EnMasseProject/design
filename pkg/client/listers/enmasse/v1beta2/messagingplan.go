/*
 * Copyright 2018-2019, EnMasse authors.
 * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1beta2

import (
	v1beta2 "github.com/enmasseproject/enmasse/pkg/apis/enmasse/v1beta2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MessagingPlanLister helps list MessagingPlans.
type MessagingPlanLister interface {
	// List lists all MessagingPlans in the indexer.
	List(selector labels.Selector) (ret []*v1beta2.MessagingPlan, err error)
	// MessagingPlans returns an object that can list and get MessagingPlans.
	MessagingPlans(namespace string) MessagingPlanNamespaceLister
	MessagingPlanListerExpansion
}

// messagingPlanLister implements the MessagingPlanLister interface.
type messagingPlanLister struct {
	indexer cache.Indexer
}

// NewMessagingPlanLister returns a new MessagingPlanLister.
func NewMessagingPlanLister(indexer cache.Indexer) MessagingPlanLister {
	return &messagingPlanLister{indexer: indexer}
}

// List lists all MessagingPlans in the indexer.
func (s *messagingPlanLister) List(selector labels.Selector) (ret []*v1beta2.MessagingPlan, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.MessagingPlan))
	})
	return ret, err
}

// MessagingPlans returns an object that can list and get MessagingPlans.
func (s *messagingPlanLister) MessagingPlans(namespace string) MessagingPlanNamespaceLister {
	return messagingPlanNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MessagingPlanNamespaceLister helps list and get MessagingPlans.
type MessagingPlanNamespaceLister interface {
	// List lists all MessagingPlans in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta2.MessagingPlan, err error)
	// Get retrieves the MessagingPlan from the indexer for a given namespace and name.
	Get(name string) (*v1beta2.MessagingPlan, error)
	MessagingPlanNamespaceListerExpansion
}

// messagingPlanNamespaceLister implements the MessagingPlanNamespaceLister
// interface.
type messagingPlanNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MessagingPlans in the indexer for a given namespace.
func (s messagingPlanNamespaceLister) List(selector labels.Selector) (ret []*v1beta2.MessagingPlan, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.MessagingPlan))
	})
	return ret, err
}

// Get retrieves the MessagingPlan from the indexer for a given namespace and name.
func (s messagingPlanNamespaceLister) Get(name string) (*v1beta2.MessagingPlan, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta2.Resource("messagingplan"), name)
	}
	return obj.(*v1beta2.MessagingPlan), nil
}
