/*
 * Copyright 2018-2019, EnMasse authors.
 * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).
 */

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"time"

	v1 "github.com/enmasseproject/enmasse/pkg/apis/enmasse/v1"
	scheme "github.com/enmasseproject/enmasse/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// IdentityProvidersGetter has a method to return a IdentityProviderInterface.
// A group's client should implement this interface.
type IdentityProvidersGetter interface {
	IdentityProviders(namespace string) IdentityProviderInterface
}

// IdentityProviderInterface has methods to work with IdentityProvider resources.
type IdentityProviderInterface interface {
	Create(*v1.IdentityProvider) (*v1.IdentityProvider, error)
	Update(*v1.IdentityProvider) (*v1.IdentityProvider, error)
	UpdateStatus(*v1.IdentityProvider) (*v1.IdentityProvider, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.IdentityProvider, error)
	List(opts metav1.ListOptions) (*v1.IdentityProviderList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.IdentityProvider, err error)
	IdentityProviderExpansion
}

// identityProviders implements IdentityProviderInterface
type identityProviders struct {
	client rest.Interface
	ns     string
}

// newIdentityProviders returns a IdentityProviders
func newIdentityProviders(c *EnmasseV1Client, namespace string) *identityProviders {
	return &identityProviders{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the identityProvider, and returns the corresponding identityProvider object, and an error if there is any.
func (c *identityProviders) Get(name string, options metav1.GetOptions) (result *v1.IdentityProvider, err error) {
	result = &v1.IdentityProvider{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("identityproviders").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of IdentityProviders that match those selectors.
func (c *identityProviders) List(opts metav1.ListOptions) (result *v1.IdentityProviderList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.IdentityProviderList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("identityproviders").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested identityProviders.
func (c *identityProviders) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("identityproviders").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a identityProvider and creates it.  Returns the server's representation of the identityProvider, and an error, if there is any.
func (c *identityProviders) Create(identityProvider *v1.IdentityProvider) (result *v1.IdentityProvider, err error) {
	result = &v1.IdentityProvider{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("identityproviders").
		Body(identityProvider).
		Do().
		Into(result)
	return
}

// Update takes the representation of a identityProvider and updates it. Returns the server's representation of the identityProvider, and an error, if there is any.
func (c *identityProviders) Update(identityProvider *v1.IdentityProvider) (result *v1.IdentityProvider, err error) {
	result = &v1.IdentityProvider{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("identityproviders").
		Name(identityProvider.Name).
		Body(identityProvider).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *identityProviders) UpdateStatus(identityProvider *v1.IdentityProvider) (result *v1.IdentityProvider, err error) {
	result = &v1.IdentityProvider{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("identityproviders").
		Name(identityProvider.Name).
		SubResource("status").
		Body(identityProvider).
		Do().
		Into(result)
	return
}

// Delete takes name of the identityProvider and deletes it. Returns an error if one occurs.
func (c *identityProviders) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("identityproviders").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *identityProviders) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("identityproviders").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched identityProvider.
func (c *identityProviders) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.IdentityProvider, err error) {
	result = &v1.IdentityProvider{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("identityproviders").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
