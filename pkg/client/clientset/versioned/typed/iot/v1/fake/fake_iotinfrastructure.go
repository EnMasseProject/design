/*
 * Copyright 2018-2019, EnMasse authors.
 * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	iotv1 "github.com/enmasseproject/enmasse/pkg/apis/iot/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeIoTInfrastructures implements IoTInfrastructureInterface
type FakeIoTInfrastructures struct {
	Fake *FakeIotV1
	ns   string
}

var iotinfrastructuresResource = schema.GroupVersionResource{Group: "iot.enmasse.io", Version: "v1", Resource: "iotinfrastructures"}

var iotinfrastructuresKind = schema.GroupVersionKind{Group: "iot.enmasse.io", Version: "v1", Kind: "IoTInfrastructure"}

// Get takes name of the ioTInfrastructure, and returns the corresponding ioTInfrastructure object, and an error if there is any.
func (c *FakeIoTInfrastructures) Get(name string, options v1.GetOptions) (result *iotv1.IoTInfrastructure, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(iotinfrastructuresResource, c.ns, name), &iotv1.IoTInfrastructure{})

	if obj == nil {
		return nil, err
	}
	return obj.(*iotv1.IoTInfrastructure), err
}

// List takes label and field selectors, and returns the list of IoTInfrastructures that match those selectors.
func (c *FakeIoTInfrastructures) List(opts v1.ListOptions) (result *iotv1.IoTInfrastructureList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(iotinfrastructuresResource, iotinfrastructuresKind, c.ns, opts), &iotv1.IoTInfrastructureList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &iotv1.IoTInfrastructureList{ListMeta: obj.(*iotv1.IoTInfrastructureList).ListMeta}
	for _, item := range obj.(*iotv1.IoTInfrastructureList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested ioTInfrastructures.
func (c *FakeIoTInfrastructures) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(iotinfrastructuresResource, c.ns, opts))

}

// Create takes the representation of a ioTInfrastructure and creates it.  Returns the server's representation of the ioTInfrastructure, and an error, if there is any.
func (c *FakeIoTInfrastructures) Create(ioTInfrastructure *iotv1.IoTInfrastructure) (result *iotv1.IoTInfrastructure, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(iotinfrastructuresResource, c.ns, ioTInfrastructure), &iotv1.IoTInfrastructure{})

	if obj == nil {
		return nil, err
	}
	return obj.(*iotv1.IoTInfrastructure), err
}

// Update takes the representation of a ioTInfrastructure and updates it. Returns the server's representation of the ioTInfrastructure, and an error, if there is any.
func (c *FakeIoTInfrastructures) Update(ioTInfrastructure *iotv1.IoTInfrastructure) (result *iotv1.IoTInfrastructure, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(iotinfrastructuresResource, c.ns, ioTInfrastructure), &iotv1.IoTInfrastructure{})

	if obj == nil {
		return nil, err
	}
	return obj.(*iotv1.IoTInfrastructure), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeIoTInfrastructures) UpdateStatus(ioTInfrastructure *iotv1.IoTInfrastructure) (*iotv1.IoTInfrastructure, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(iotinfrastructuresResource, "status", c.ns, ioTInfrastructure), &iotv1.IoTInfrastructure{})

	if obj == nil {
		return nil, err
	}
	return obj.(*iotv1.IoTInfrastructure), err
}

// Delete takes name of the ioTInfrastructure and deletes it. Returns an error if one occurs.
func (c *FakeIoTInfrastructures) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(iotinfrastructuresResource, c.ns, name), &iotv1.IoTInfrastructure{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeIoTInfrastructures) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(iotinfrastructuresResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &iotv1.IoTInfrastructureList{})
	return err
}

// Patch applies the patch and returns the patched ioTInfrastructure.
func (c *FakeIoTInfrastructures) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *iotv1.IoTInfrastructure, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(iotinfrastructuresResource, c.ns, name, pt, data, subresources...), &iotv1.IoTInfrastructure{})

	if obj == nil {
		return nil, err
	}
	return obj.(*iotv1.IoTInfrastructure), err
}
