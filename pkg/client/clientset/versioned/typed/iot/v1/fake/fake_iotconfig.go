/*
 * Copyright 2018-2019, EnMasse authors.
 * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	iotv1 "github.com/enmasseproject/enmasse/pkg/apis/iot/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeIoTConfigs implements IoTConfigInterface
type FakeIoTConfigs struct {
	Fake *FakeIotV1
	ns   string
}

var iotconfigsResource = schema.GroupVersionResource{Group: "iot.enmasse.io", Version: "v1", Resource: "iotconfigs"}

var iotconfigsKind = schema.GroupVersionKind{Group: "iot.enmasse.io", Version: "v1", Kind: "IoTConfig"}

// Get takes name of the ioTConfig, and returns the corresponding ioTConfig object, and an error if there is any.
func (c *FakeIoTConfigs) Get(name string, options v1.GetOptions) (result *iotv1.IoTConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(iotconfigsResource, c.ns, name), &iotv1.IoTConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*iotv1.IoTConfig), err
}

// List takes label and field selectors, and returns the list of IoTConfigs that match those selectors.
func (c *FakeIoTConfigs) List(opts v1.ListOptions) (result *iotv1.IoTConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(iotconfigsResource, iotconfigsKind, c.ns, opts), &iotv1.IoTConfigList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &iotv1.IoTConfigList{ListMeta: obj.(*iotv1.IoTConfigList).ListMeta}
	for _, item := range obj.(*iotv1.IoTConfigList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested ioTConfigs.
func (c *FakeIoTConfigs) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(iotconfigsResource, c.ns, opts))

}

// Create takes the representation of a ioTConfig and creates it.  Returns the server's representation of the ioTConfig, and an error, if there is any.
func (c *FakeIoTConfigs) Create(ioTConfig *iotv1.IoTConfig) (result *iotv1.IoTConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(iotconfigsResource, c.ns, ioTConfig), &iotv1.IoTConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*iotv1.IoTConfig), err
}

// Update takes the representation of a ioTConfig and updates it. Returns the server's representation of the ioTConfig, and an error, if there is any.
func (c *FakeIoTConfigs) Update(ioTConfig *iotv1.IoTConfig) (result *iotv1.IoTConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(iotconfigsResource, c.ns, ioTConfig), &iotv1.IoTConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*iotv1.IoTConfig), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeIoTConfigs) UpdateStatus(ioTConfig *iotv1.IoTConfig) (*iotv1.IoTConfig, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(iotconfigsResource, "status", c.ns, ioTConfig), &iotv1.IoTConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*iotv1.IoTConfig), err
}

// Delete takes name of the ioTConfig and deletes it. Returns an error if one occurs.
func (c *FakeIoTConfigs) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(iotconfigsResource, c.ns, name), &iotv1.IoTConfig{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeIoTConfigs) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(iotconfigsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &iotv1.IoTConfigList{})
	return err
}

// Patch applies the patch and returns the patched ioTConfig.
func (c *FakeIoTConfigs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *iotv1.IoTConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(iotconfigsResource, c.ns, name, pt, data, subresources...), &iotv1.IoTConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*iotv1.IoTConfig), err
}
