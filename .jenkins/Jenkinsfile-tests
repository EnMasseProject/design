#!/usr/bin/env groovy

def lib = evaluate readTrusted('.jenkins/jenkins-functions.groovy')

pipeline {
    options {
        timeout(time: 6, unit: 'HOURS')
        ansiColor('xterm')
    }
    environment {
        MAILING_LIST = credentials('MAILING_LIST')
        ARTIFACTS_DIR = 'artifacts'
        ANSIBLE_FORCE_COLOR = true

        OPENSHIFT_PROJECT = "enmasse-infra"
        TAG = 'latest'
        OC_VERSION = "${params.OC_VERSION}"
    }
    agent {
        node {
            label "${params.AGENT_LABEL}"
        }
    }
    stages {
        stage('wait for agent ready') {
            steps {
                script {
                    lib.waitUntilAgentReady()
                }
            }
        }
        stage('add description') {
            steps {
                script {
                    currentBuild.description = "related build: ${params.BUILD_TAG}"
                }
            }
        }
        stage('clean') {
            steps {
                cleanWs()
            }
        }
        stage('checkout') {
            steps {
                checkout scm
            }
        }
        stage('start openshift') {
            steps {
                withCredentials([string(credentialsId: params.OPENSHIFT_URL_CREDENTIAL_ID, variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: params.OPENSHIFT_CREDENTIALS_CREDENTIAL_ID, passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    timeout(time: 10, unit: 'MINUTES') {
                        script {
                            lib.startOpenshift(env.OC_VERSION)
                        }
                    }
                }
            }
        }
        stage('install enmasse') {
            steps {
                withCredentials([string(credentialsId: params.OPENSHIFT_URL_CREDENTIAL_ID, variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: params.OPENSHIFT_CREDENTIALS_CREDENTIAL_ID, passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER'), string(credentialsId: params.OPENSHIFT_DOMAIN_CREDENTIAL_ID, variable: 'KUBERNETES_DOMAIN')]) {
                    script {
                        lib.installEnmasse(env.TAG, true, params.DEPLOY_IOT)
                    }
                }
            }
        }
        stage('system tests') {
            steps {
                withCredentials([string(credentialsId: params.OPENSHIFT_URL_CREDENTIAL_ID, variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: params.OPENSHIFT_CREDENTIALS_CREDENTIAL_ID, passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER'), string(credentialsId: params.OPENSHIFT_DOMAIN_CREDENTIAL_ID, variable: 'KUBERNETES_DOMAIN')]) {
                    script {
                        lib.runSystemtests(params.TEST_PROFILE, params.TEST_CASE)
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                lib.postAction(env.ARTIFACTS_DIR)
                if (env.OC_VERSION == '4') {
                    lib.uninstallEnmasse(env.TAG, env.OPENSHIFT_PROJECT)
                }
            }
        }
        failure {
            script {
                lib.sendMail(env.MAILING_LIST, env.JOB_NAME, env.BUILD_URL)
            }
        }
    }
}
