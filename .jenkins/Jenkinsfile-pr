#!/usr/bin/env groovy
def lib

pipeline {

    options {
        timeout(time: 15, unit: 'HOURS')
        ansiColor('xterm')
    }
    environment {
        TAG = "latest"
        ARTIFACTS_DIR = 'artifacts'
        ANSIBLE_FORCE_COLOR = true
        OPENSHIFT_PROJECT = "enmasse-infra"
    }
    agent {
        node {
            label "${params.AGENT_LABEL}"
        }
    }
    stages {
        stage('clean') {
            steps {
                cleanWs()
            }
        }
        stage('checkout') {
            steps {
                checkout scm
            }
        }
        stage('wait for agent ready') {
            steps {
                script {
                    lib = evaluate readFile('.jenkins/jenkins-functions.groovy')
                    lib.waitUntilAgentReady()
                }
            }
        }
        stage('parse parameters from comment') {
            steps {
                script {
                    if (env.ghprbCommentBody.contains('testcase=')) {
                        env.TEST_CASE = env.ghprbCommentBody.split('testcase=')[1].split(/\s/)[0].split(/$/)[0]
                    } else {
                        env.TEST_CASE = params.TEST_CASE
                    }
                    if (env.ghprbCommentBody.contains('profile=')) {
                        env.TEST_PROFILE = env.ghprbCommentBody.split('profile=')[1].split(/\s/)[0].split(/$/)[0]
                    } else {
                        env.TEST_PROFILE = params.TEST_PROFILE
                    }
                    if (env.ghprbCommentBody.contains('upgrade_from=')) {
                        env.UPGRADE_FROM = env.ghprbCommentBody.split('upgrade_from=')[1].split(/\s/)[0].split(/$/)[0]
                    } else {
                        env.UPGRADE_FROM = params.UPGRADE_FROM
                    }
                    if (env.ghprbCommentBody.contains('test_only')) {
                        env.TEST_ONLY = true
                        env.DOCKER_REGISTRY = 'quay.io'
                        env.DOCKER_ORG = 'enmasse'
                    } else {
                        env.TEST_ONLY = false
                        env.DOCKER_REGISTRY = '172.30.1.1:5000'
                        env.DOCKER_ORG = 'enmasseci'
                    }

                    echo "TEST_ONLY: ${env.TEST_ONLY}"
                    echo "TEST_CASE: ${env.TEST_CASE}"
                    echo "TEST_PROFILE: ${env.TEST_PROFILE}"
                    echo "UPGRADE_FROM: ${env.UPGRADE_FROM}"
                }
            }
        }
        stage('start openshift') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        lib.startOpenshift()
                    }
                }
            }
        }
        stage('build') {
            when {
                environment name: 'TEST_ONLY', value: 'false'
            }
            steps {
                script {
                    lib.buildEnmasse()
                }
            }

        }
        stage('push docker images') {
            when {
                environment name: 'TEST_ONLY', value: 'false'
            }
            steps {
                sh 'oc login -u test -p test --server localhost:8443 --insecure-skip-tls-verify'
                sh 'oc new-project enmasseci'
                sh '$DOCKER login -u unused -p `oc whoami -t` $DOCKER_REGISTRY'
                sh 'make docker_push'
            }
        }

        //----------------------------------------------------------------------------------------------------
        // upgrade PR build
        //----------------------------------------------------------------------------------------------------
        stage('[upgrade] download released version') {
            when {
                expression { env.TEST_PROFILE == 'upgrade' }
            }
            steps {
                sh "sh ./systemtests/scripts/download_released_enmasse.sh ${env.UPGRADE_FROM}"
            }
        }
        stage('[upgrade] login') {
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    script {
                        sh "./systemtests/scripts/login_cluster_user.sh true"
                    }
                }
            }
        }
        stage('[upgrade] run upgrade test') {
            when {
                expression { env.TEST_PROFILE == 'upgrade' }
            }
            environment {
                USE_DUMMY_ADDRESS = true
                UPGRADE_TEMPLATES = "${WORKSPACE}/templates/build/enmasse-${env.TAG}"
                START_TEMPLATES = "${WORKSPACE}/templates/build/enmasse-${env.UPGRADE_FROM}"
            }
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    script {
                        sh "make templates || true"
                        lib.runSystemtests('systemtests-upgrade', 'upgrade.**')
                    }
                }
            }
        }
        //----------------------------------------------------------------------------------------------------
        // standard PR build
        //----------------------------------------------------------------------------------------------------
        stage('[PR] install enmasse') {
            when {
                expression { env.TEST_PROFILE != 'upgrade' }
            }
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    script {
                        lib.installEnmasse(env.TAG, true, env.TEST_PROFILE == 'shared-iot' || env.TEST_PROFILE == 'smoke-iot')
                    }
                }
            }
        }
        stage('[PR] system tests') {
            when {
                expression { env.TEST_PROFILE != 'upgrade' }
            }
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    script {
                        lib.runSystemtests(env.TEST_PROFILE, env.TEST_CASE)
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                lib.postAction(env.ARTIFACTS_DIR)
            }
        }
        failure {
            script {
                sh "sudo ./systemtests/scripts/get_failures.sh"
                lib.postGithubPrComment("failures.json")
                echo "build failed"
            }
        }
    }
}