#!/usr/bin/env groovy

def lib = evaluate readTrusted('.jenkins/jenkins-functions.groovy')

pipeline {
    options {
        timeout(time: 2, unit: 'HOURS')
        ansiColor('xterm')
    }
    environment {
        MAILING_LIST = credentials('MAILING_LIST')
        CORES_DIR = "/tmp/cores"
        ARTIFACTS_DIR = 'artifacts'
        ANSIBLE_FORCE_COLOR = true
        OPENSHIFT_PROJECT = "enmasse-infra"
    }
    agent {
        node {
            label "enmasse"
        }
    }
    stages {
        stage('wait for agent ready') {
            steps {
                script {
                    lib.waitUntilAgentReady()
                }
            }
        }
        stage('add description') {
            steps {
                script {
                    currentBuild.description = "related build: ${params.BUILD_TAG}"
                }
            }
        }
        stage('clean') {
            steps {
                cleanWs()
            }
        }
        stage('checkout') {
            steps {
                checkout scm
                sh "git checkout ${params.COMMIT_SHA}"
                sh "sudo chmod +x systemtests/scripts/*"
                sh 'rm -rf artifacts && mkdir -p artifacts'
            }
        }
        stage('start openshift') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        lib.startOpenshift()
                    }
                }
            }
        }
        stage('download released versions') {
            steps {
                script {
                    for (def startVersion : params.START_VERSION.split(",")) {
                        sh "sh ./systemtests/scripts/download_released_enmasse.sh ${startVersion}"
                    }
                }
            }
        }
        stage('install requirements') {
            steps {
                script {
                    sh "ansible-playbook systemtests/ansible/playbooks/systemtests-dependencies.yml"
                }
            }
        }
        stage('login') {
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    script {
                        lib.loginOCUser(true)
                    }
                }
            }
        }
        stage('run systemtests upgrade tests') {
            steps {
                withEnv([
                    "TAG=latest",
                    "USE_DUMMY_ADDRESS=true",
                    "UPGRADE_TEMPLATES=${WORKSPACE}/templates/build/enmasse-latest"]) {
                    withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                        script {
                            for (def startVersion : params.START_VERSION.split(",")) {
                                println "Starting upgrade tests from version "+startVersion
                                sh(script: 'make templates || true')
                                def envVarsString = "START_TEMPLATES=${WORKSPACE}/templates/build/enmasse-${startVersion}"
                                lib.runSystemtests('systemtests-upgrade', params.TEST_CASE, envVarsString)
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                lib.postAction(env.ARTIFACTS_DIR)
            }
        }
        failure {
            script {
                lib.sendMail(env.MAILING_LIST, env.JOB_NAME, env.BUILD_URL)
            }
        }
    }
}
