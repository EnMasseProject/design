#!/usr/bin/env groovy

def lib = evaluate readTrusted('.jenkins/jenkins-functions.groovy')

pipeline {
//    parameters {
//        string(name: 'TEST_CASE', defaultValue: 'common.upgrade.**', description: 'maven parameter for executing specific tests')
//        string(name: 'BUILD_TAG', defaultValue: '', description: 'version of images')
//        string(name: 'COMMIT_SHA', defaultValue: '', description: 'Commit sha1')
//        string(name: 'START_VERSION', defaultValue: '0.26.2', description: 'Version of enmasse which will be upgraded')
//        string(name: 'AGENT_LABEL', defaultValue: 'enmasse', description: 'label of openstack agent')
//        string(name: 'DEBUG', defaultValue: 'false', description: 'skip post actions')
//    }
    options {
        timeout(time: 2, unit: 'HOURS')
        ansiColor('xterm')
    }
    environment {
        MAILING_LIST = credentials('MAILING_LIST')
        CORES_DIR = "/tmp/cores"
        ARTIFACTS_DIR = 'artifacts'
        ANSIBLE_FORCE_COLOR = true
        OPENSHIFT_PROJECT = "enmasse-infra"
    }
    agent {
        node {
            label "${params.AGENT_LABEL}"
        }
    }
    stages {
        stage('wait for agent ready') {
            steps {
                script {
                    lib.waitUntilAgentReady()
                }
            }
        }
        stage('add description') {
            steps {
                script {
                    currentBuild.description = "related build: ${params.BUILD_TAG}"
                }
            }
        }
        stage('clean') {
            steps {
                cleanWs()
            }
        }
        stage('checkout') {
            steps {
                checkout scm
                sh "git checkout ${params.COMMIT_SHA}"
                sh "sudo chmod +x systemtests/scripts/*"
                sh 'rm -rf artifacts && mkdir -p artifacts'
            }
        }
        stage('start openshift') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        lib.startOpenshift()
                    }
                }
            }
        }
        stage('download released version') {
            steps {
                sh "sh ./systemtests/scripts/download_released_enmasse.sh ${params.START_VERSION}"
            }
        }
        stage('install requirements') {
            steps {
                script {
                    sh "ansible-playbook systemtests/ansible/playbooks/systemtests-dependencies.yml"
                }
            }
        }
        stage('login') {
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    script {
                        sh "./systemtests/scripts/login_cluster_user.sh true"
                    }
                }
            }
        }
        stage('run systemtests upgrade tests') {
            environment {
                TAG = "latest"
                USE_DUMMY_ADDRESS = true
                UPGRADE_TEMPLATES = "${WORKSPACE}/templates/build/enmasse-${env.TAG}"
                START_TEMPLATES = "${WORKSPACE}/templates/build/enmasse-${params.START_VERSION}"
            }
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    script {
                        sh 'make templates || true'
                        lib.runSystemtests(env.CORES_DIR, 'systemtests-upgrade', params.TEST_CASE)
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                lib.postAction(env.CORES_DIR, env.ARTIFACTS_DIR, params.DEBUG)
            }
        }
        failure {
            script {
                lib.sendMail(env.MAILING_LIST, env.JOB_NAME, env.BUILD_URL)
            }
        }
    }
}
