{
    "address": {
        "anycast": {
            "longDescription": "The `anycast` address type is a scalable 'direct' address for sending messages to one consumer. Messages sent to an `anycast` address is not stored but forwarded directly to the consumer. This makes this address type ideal for request-reply (RPC) uses or even work distribution. This is the cheapest address type as it doesn't require any persistence.",
            "shortDescription": "A scalable 'direct' address for sending messages to one consumer"
        },
        "broadcast": {
            "longDescription": "The `broadcast` address type is a scalable 'direct' address for sending messages to multiple consumers. Messages sent to a `broadcast` address are forwarded to all consumers receiving on that address. It is important to note that only pre-settled messages can be sent to broadcast addresses, as message acknowledgements from consumers are not propagated to producers.",
            "shortDescription": "A scalable 'direct' address for sending messages to multiple consumers"
        },
        "name": {
            "external": "https://github.com/EnMasseProject/enmasse/pull/44",
            "longDescription": "The <b>address name</b> is a unique string to which messages can be sent and received.",
            "shortDescription": "Enter the address name"
        },
        "queue": {
            "longDescription": "The `queue` address type is a store-and-forward queue. This address type is appropriate for implementing a distributed work queue, handling traffic bursts and other usecases where you want to decouple the producer and consumer. A queue may be sharded across multiple storage units, in which case message order is no longer guaranted.",
            "shortDescription": "A store and forward queue"
        },
        "topic": {
            "longDescription": "The `topic` address type supports the publish-subscribe messaging pattern where you have 1..N producers and 1..M consumers. Each message published to a topic address is forwarded to all subscribers for that address. A subscriber may also be durable, in which case messages are kept until the subscriber has acknowledged them.",
            "shortDescription": "A publish-subscriber topic"
        }
    }
}