#!/usr/bin/env groovy

def lib = evaluate readTrusted('./jenkins-functions.groovy')

pipeline {
    agent {
        node {
            label 'enmasse'
        }
    }
    parameters {
        //execute all tests as default for each new Pull request
        string(name: 'TEST_CASE', defaultValue: '', description: 'maven parameter for executing specific tests')
    }
    options {
        timeout(time: 6, unit: 'HOURS')
    }
    environment {
        DOCKER_REGISTRY = '172.30.1.1:5000'
        DOCKER_ORG = 'enmasseci'
        TAG = "${BUILD_TAG}"
        COMMIT = "${BUILD_TAG}"
        CORES_DIR = "/tmp/cores"
    }
    stages {
        stage('wait for agent ready') {
            steps {
                script {
                    lib.waitUntilAgentReady()
                }
            }
        }
        stage('clean') {
            steps {
                cleanWs()
            }
        }
        stage('checkout') {
            steps {
                checkout scm
                sh 'rm -rf artifacts && mkdir -p artifacts'
            }
        }
        stage('start openshift') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        lib.startOpenshift()
                    }
                }
            }
        }
        stage('build') {
            steps {
                ansiColor('xterm') {
                    script {
                        lib.buildEnmasse()
                    }
                }
            }
        }
        stage('push docker images') {
            steps {
                sh 'oc login -u test -p test --server localhost:8443 --insecure-skip-tls-verify'
                sh 'oc new-project enmasseci'
                sh '$DOCKER login -u unused -p `oc whoami -t` $DOCKER_REGISTRY'
                sh 'make docker_push'
            }
        }
        stage('system tests') {
            environment {
                ARTIFACTS_DIR = 'artifacts'
                JOB_NAME_SUB = "${String.format("%.15s", JOB_NAME).toLowerCase()}"
                OPENSHIFT_PROJECT = "${JOB_NAME_SUB}${BUILD_NUMBER}"
                USE_DUMMY_ADDRESS = true
            }
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    ansiColor('xterm') {
                        script {
                            lib.runSystemtests(env.CORES_DIR, env.TAG, 'systemtests-pr', params.TEST_CASE)
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                lib.postAction(env.CORES_DIR)
            }
        }
        failure {
            echo "build failed"
        }
    }
}
