#!/usr/bin/env groovy

def lib = evaluate readTrusted('./jenkins-functions.groovy')

pipeline {
    agent {
        node {
            label 'enmasse'
        }
    }
    parameters {
        string(name: 'TEST_CASE', defaultValue: '', description: 'maven parameter for executing specific tests')
        string(name: 'MAILING_LIST', defaultValue: '', description: '')
        string(name: 'BUILD_TAG', defaultValue: '', description: 'version of images')
        string(name: 'COMMIT_SHA', defaultValue: '', description: 'Commit sha1')
    }
    options {
        timeout(time: 5, unit: 'HOURS')
    }
    environment {
        CORES_DIR = "/tmp/cores"
        TAG = "latest"
    }
    stages {
        stage('wait for agent ready') {
            steps {
                script {
                    lib.waitUntilAgentReady()
                }
            }
        }
        stage('add description') {
            steps {
                script {
                    currentBuild.description = "related build: ${params.BUILD_TAG}"
                }
            }
        }
        stage('clean') {
            steps {
                cleanWs()
            }
        }
        stage('checkout') {
            steps {
                checkout scm
                sh "git checkout ${params.COMMIT_SHA}"
                sh 'rm -rf artifacts && mkdir -p artifacts'
            }
        }
        stage('start openshift') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        lib.startOpenshift()
                    }
                }
            }
        }
        stage('system tests') {
            environment {
                ARTIFACTS_DIR = 'artifacts'
                JOB_NAME_SUB = "${String.format("%.15s", JOB_NAME)}"
                OPENSHIFT_PROJECT = "${JOB_NAME_SUB}${BUILD_NUMBER}"
                DOCKER_REGISTRY = credentials('docker-registry-host')
                DOCKER_CREDENTIALS = credentials('docker-registry-credentials')
                DOCKER_PASS = "${env.DOCKER_CREDENTIALS_PSW}"
                DOCKER_USER = "${env.DOCKER_CREDENTIALS_USR}"
                COMMIT = "${params.BUILD_TAG}"
                USE_DUMMY_ADDRESS = true
            }
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    ansiColor('xterm') {
                        script {
                            sh 'make templates || true'
                            lib.runSystemtests(env.CORES_DIR, env.TAG, '', params.TEST_CASE)
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                lib.postAction(env.CORES_DIR)
            }
        }
        failure {
            echo "build failed"
            mail to: "$MAILING_LIST", subject: "EnMasse build has finished with ${result}", body: "See ${env.BUILD_URL}"
        }
    }
}
