- name: Create standard-authservice certificates
  include_role:
    name: ssl_certs
  vars:
    cert_secret: standard-authservice-cert
    cert_cn: "standard-authservice.{{ namespace }}.svc.cluster.local"
    cert_sans: "DNS:standard-authservice.{{ namespace }}.svc.cluster,DNS:standard-authservice.{{ namespace }}.svc,DNS:standard-authservice"

- name: Create secret with the keycloak credentials
  shell: oc create secret generic -n {{ namespace }} keycloak-credentials --from-literal=admin.username=admin --from-literal=admin.password={{ keycloak_admin_password }}
  register: secret_exists
  failed_when: secret_exists.stderr != '' and 'already exists' not in secret_exists.stderr

- name: Keycloak http setting
  include_role:
    name: standard_authservice_url

- name: Create OAUTH service account
  shell: oc create sa -n {{ namespace }} kc-oauth
  register: oauth_sa_exists
  failed_when: oauth_sa_exists.stderr != '' and 'already exists' not in oauth_sa_exists.stderr
  changed_when: oauth_sa_exists.rc == 0
- name: Annotate OAUTH service account
  shell: oc annotate sa -n {{ namespace }} kc-oauth serviceaccounts.openshift.io/oauth-redirecturi.first={{ keycloak_http_url }}
  when: oauth_sa_exists.changed
- shell: oc sa get-token -n {{ namespace }} kc-oauth
  register: token_result
- set_fact:
    oauth_token: "{{ token_result.stdout }}"
- name: Get OpenShift OAuth URL
  shell: oc get --raw=/.well-known/oauth-authorization-server
  register: result
- name: Set identity provider
  when: result.rc == 0
  set_fact:
    identity_url: "{{ (result.stdout | from_json).get('issuer') }}"
- name: Unset identity provider if using local cluster
  when: identity_url is match("https://127.0.0.1:8443") or identity_url is match("https://localhost:8443")
  set_fact:
    identity_url: null

- name: Create configmap with the keycloak info
  shell: oc create configmap keycloak-config -n {{ namespace }} --from-literal=hostname=standard-authservice.{{ namespace }}.svc --from-literal=port=5671 --from-literal=caSecretName=standard-authservice-cert --from-literal=httpUrl={{ keycloak_http_url }} --from-literal=identityProviderClientId=system:serviceaccount:{{ namespace }}:kc-oauth --from-literal=identityProviderClientSecret={{ oauth_token }} --from-literal=identityProviderUrl={{ identity_url }}
  register: configmap_exists
  failed_when: configmap_exists.stderr != '' and 'already exists' not in configmap_exists.stderr and (keycloak_http_url is not defined)
