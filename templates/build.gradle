description = 'EnMasse templates'
apply plugin: 'distribution'

task buildJsonnet(type: Exec) {
    workingDir 'jsonnet'
    commandLine 'make'
}

task prepareOutputFolders {
    doLast {
        exec {
            commandLine 'mkdir', '-p', 'generated/kubernetes/addons'
        }
        exec {
            commandLine 'mkdir', '-p', 'generated/openshift/addons'
        }
        copy {
            from 'include'
            include '*.json'
            into 'generated'
        }
    }
}

task cleanFolders(type: Delete) {
    delete 'generated', 'build'
    followSymlinks = true
}

clean.dependsOn cleanFolders

task buildTemplates {
    dependsOn buildJsonnet
    dependsOn prepareOutputFolders
    doLast {
        FileTree jsonnetFiles = fileTree(dir: ".").include("*.jsonnet")
        jsonnetFiles.each { f ->
            exec {
                workingDir projectDir
                println "Projectdir: ${projectDir}"
                environment PROJECT: dockerOrg, REGISTRY: dockerRegistry, VERSION: commit
                commandLine 'jsonnet/jsonnet', '--ext-str', 'VERSION', '--ext-str', 'REGISTRY', '--ext-str', 'PROJECT', '-m', 'generated', f.getAbsolutePath()
            }
        }
    }
}

task convertToYAML {
    dependsOn buildTemplates
    doLast {
        FileTree jsonFiles = fileTree(dir: "generated").include("**/**.json")
        jsonFiles.each { inputFile ->
            String outputFileName = inputFile.getAbsolutePath().replace(".json", ".yaml")
            println "Converting to $outputFileName"
            exec {
                commandLine './scripts/convertyaml.rb', inputFile.getAbsolutePath(), outputFileName
            }
        }
    }
}

task copyGenerated {
    dependsOn convertToYAML
    doLast {
        copy {
            from "generated/kubernetes"
            include("**/**.yaml")
            into "install/kubernetes"
        }

        copy {
            from "generated/openshift"
            include("**/**.yaml")
            into "install/openshift"
        }
    }
}

task buildArtifact(type: Tar) {
    dependsOn copyGenerated
    from ('install') {
        into "enmasse-${dockerImageVersion}"
    }
    compression = Compression.GZIP
    archiveName "enmasse-${dockerImageVersion}.tgz"
    destinationDir file('build')
}

build.dependsOn(buildArtifact)
